#!/usr/bin/env python3

import sqlite3
import subprocess
from argparse import ArgumentParser
from configparser import ConfigParser
from os import environ
from pathlib import Path
from hashlib import sha256
from contextlib import closing, contextmanager, suppress
from tempfile import NamedTemporaryFile
from shutil import copyfile

firefox_dir = Path.home() / '.mozilla/firefox'

# b/c sqlite databases are locked by firefox we need copy them into a temporary location and connect to them there
@contextmanager
def temp_sqlite(path):
    with NamedTemporaryFile() as temp_loc:
        copyfile(path, temp_loc.name)
        with closing(sqlite3.connect(temp_loc.name)) as conn:
            yield conn

# go through all installs and chose first profile you find.
# better option would be to use install (which firefox) but that would add a dependency on cityhash
def default_profile_path():
    installs = ConfigParser()
    installs.read(firefox_dir / 'installs.ini')
    for i in installs.values():
        with suppress(KeyError):
            return firefox_dir / i['Default']
    raise Exception("could not find a default profile in installs.ini")

# get Path to profile directory from profil name
def path_from_name(name):
    profiles = ConfigParser()
    profiles.read(firefox_dir / 'profiles.ini')
    for i in profiles.values():
        with suppress(KeyError):
            if i['Name'] == name:
                return firefox_dir / i['Path']
    raise Exception("no profile with this name")

# main function, finds all history urls
def write_rofi_input(profile_loc):
    with temp_sqlite(profile_loc / 'places.sqlite') as places:
        conn_res = places.execute("""SELECT url, title
                                     FROM moz_places
                                     WHERE title NOT LIKE "Launch Meeting%" AND title NOT LIKE "%Redirecting...%"
                                     ORDER BY visit_count DESC, last_visit_date DESC;
                                  """).fetchall()
    for (url, title) in conn_res:
        print(f"{title}\x00info\x1f{url}")

if __name__ == "__main__":
    parser = ArgumentParser(description="generate list of history urls for rofi")
    parser.add_argument('-p', '--profile',                  metavar='prof', help="firefox profile to use")
    args, _ = parser.parse_known_args()   # rofi gives us selected entry as additional argument -> ignore (not useful)

    if environ.get('ROFI_RETV') == '1':
        prof = [] if args.profile is None else ["-P", args.profile]
        subprocess.Popen(["firefox", environ['ROFI_INFO']] + prof, close_fds=True, start_new_session=True, stdout=subprocess.DEVNULL)
    else:
        profile_path = default_profile_path() if args.profile is None else path_from_name(args.profile)
        write_rofi_input(profile_path)
