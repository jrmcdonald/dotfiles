{{- if not .gitpod -}}
#
# Waitrose
#
aws-sso() {
  aws_profile=${1:-nonprod}
  export AWS_PROFILE=${aws_profile}
  aws sso login 
}

aws-sso-by-env() {
    aws_env=${1:-dev}

    aws_profile=""
    case "${aws_env}" in
      "sandbox")
        aws_profile="sandbox"
        ;;
      "dev")
        aws_profile="nonprod"
        ;;
      "qa")
        aws_profile="nonprod"
        ;;
      "perf2")
        aws_profile="nonprod2"
        ;;
      "prod")
        aws_profile="prod"
        ;;
      *)
        aws_profile="nonprod"
        ;;
    esac

    aws-sso ${aws_profile}
}

aws-eks() {
    aws_eks_env=${1:-dev}

    aws-sso-by-env ${aws_eks_env}

    aws eks update-kubeconfig --name {{ (onepasswordItemFields "Amazon AWS (Waitrose)").kubecontext.value }}

    current_name=$(kubectx -c)
    desired_name=$(echo ${current_name} | cut -d / -f2)

    kubectl config delete-context ${desired_name} 
    kubectl config rename-context ${current_name} ${desired_name}
}

cfn_nag_scan() {
  docker run -ti --rm -v $(pwd):/apps -w /apps alpine/cfn-nag $@
}

mssh-get-instance-id() {
     env=${1:-dev}

     aws ec2 describe-instances \
        --filter "Name=tag:aws:cloudformation:stack-name,Values={{- (onepasswordItemFields "Amazon AWS (Waitrose)").jumphost.value }}" \
        --query "Reservations[].Instances[?State.Name == 'running'].InstanceId[]" \
        --output text
}

mssh-to-instance() {
    env=${1:-dev}
    shift

    instance_id=$(mssh-get-instance-id ${env})

    aws ec2-instance-connect ssh --instance-id ${instance_id} ${@}
}

mssh-port-forward() {
    env=${1:-dev}
    host=${2}
    port=${3}

    aws-sso-by-env ${env}

    mssh-to-instance ${env} --local-forwarding ${port}:${host}:${port}
}

mssh-customer-db() {
    env=${1:-dev}

    mssh-port-forward ${env} {{ (onepasswordItemFields "Amazon AWS (Waitrose)").customerdb.value }} 5432
}

aws-customer-db-auth() {
  cluster_endpoint=$(aws rds describe-db-cluster-endpoints --filters "Name=db-cluster-endpoint-type,Values=READER" \
                    | jq -r '.DBClusterEndpoints[] | select(.Endpoint | contains("customer")) | .Endpoint')

  aws rds generate-db-auth-token \
      --hostname ${cluster_endpoint} \
      --port 5432 \
      --username wtrops \
      --region eu-west-1
}
{{- end }}
